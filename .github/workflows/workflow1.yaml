name: Validate and Run Playbook

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate-and-run:
    runs-on: ubuntu-latest
    env:
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      MAX_RETRIES: 30
      RETRY_INTERVAL: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Check Vault Configuration
        run: |
          # Check if Vault is accessible
          if ! curl -s "$VAULT_ADDR/v1/sys/health" > /dev/null; then
            echo "::error::Vault is not accessible at $VAULT_ADDR"
            exit 1
          fi
          echo "✓ Vault is accessible"

      - name: Check API Status
        run: |
          if ! curl -s http://localhost:8080/api/health > /dev/null; then
            echo "::error::API is not running or not accessible at http://localhost:8080"
            exit 1
          fi
          echo "✓ API is running"

      - name: Execute Playbook
        run: |
          # First, check if jq is installed
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Function to check job status
          check_job_status() {
            local job_id=$1
            local status=$(curl -s "http://localhost:8080/api/jobs/$job_id" | jq -r '.status')
            echo "$status"
          }

          # Function to format timestamp
          format_timestamp() {
            date -d "$1" "+%Y-%m-%d %H:%M:%S"
          }

          # Execute playbook
          echo "::group::Executing Playbook"
          response=$(curl -s -X POST http://localhost:8080/api/playbook/run \
            -H "Content-Type: application/json" \
            -d '{
              "repository_url": "https://github.com/vinnie-kaboom/ansible-repo.git",
              "playbook_path": "playbooks/site.yml",
              "inventory": {
                "webservers": {
                  "ansible_host": "localhost"
                }
              },
              "environment": {
                "ANSIBLE_HOST_KEY_CHECKING": "False"
              }
            }')
          
          if [ $? -ne 0 ]; then
            echo "::error::Failed to execute playbook"
            exit 1
          fi

          # Parse and display initial response
          echo "✓ Playbook execution request sent successfully"
          echo "Response:"
          echo "$response" | jq '.'
          
          # Get the job ID from the response
          job_id=$(echo "$response" | jq -r '.id')
          if [ "$job_id" == "null" ] || [ -z "$job_id" ]; then
            echo "::error::Failed to get job ID from response"
            exit 1
          fi

          echo "::endgroup::"
          echo "::group::Job Status"
          
          # Poll for job completion
          echo "Waiting for job $job_id to complete..."
          for ((i=1; i<=$MAX_RETRIES; i++)); do
            job_status=$(curl -s "http://localhost:8080/api/jobs/$job_id")
            status=$(echo "$job_status" | jq -r '.status')
            
            # Format and display current status
            echo "Attempt $i/$MAX_RETRIES - Status: $status"
            echo "$job_status" | jq '{
              id: .id,
              status: .status,
              start_time: .start_time,
              end_time: .end_time,
              retry_count: .retry_count
            }'
            
            # Check if job is complete
            if [ "$status" == "completed" ]; then
              echo "✓ Job completed successfully"
              echo "$job_status" | jq '.output'
              echo "::endgroup::"
              exit 0
            elif [ "$status" == "failed" ]; then
              echo "::error::Job failed"
              echo "$job_status" | jq '.error'
              echo "::endgroup::"
              exit 1
            fi
            
            # Wait before next check
            sleep $RETRY_INTERVAL
          done
          
          echo "::error::Job did not complete within the expected time"
          echo "::endgroup::"
          exit 1 
