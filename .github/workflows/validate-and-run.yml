name: Validate and Run Playbook

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate-and-run:
    runs-on: self-hosted
    env:
      VAULT_ADDR: http://127.0.0.1:8200
      MAX_RETRIES: 30
      RETRY_INTERVAL: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Check Vault Configuration
        run: |
          # Check if Vault is accessible
          if ! curl -s "$VAULT_ADDR/v1/sys/health" > /dev/null; then
            echo "::error::Vault is not accessible at $VAULT_ADDR"
            exit 1
          fi
          echo "✓ Vault is accessible"

      - name: Execute Playbook
        id: execute-playbook
        run: |
          # Send the playbook execution request
          echo "Executing Playbook"
          response=$(curl -s -X POST http://localhost:9090/api/playbook/run \
            -H "Content-Type: application/json" \
            -d '{
              "repository_url": "https://github.com/vinnie-kaboom/ansible-repo.git",
              "playbook_path": "playbooks/validate-vault.yml",
              "inventory": {
                "webservers": {
                  "ansible_host": "localhost"
                }
              },
              "environment": {
                "ANSIBLE_HOST_KEY_CHECKING": "False"
              }
            }')

          # Check if the request was successful
          if [ $? -ne 0 ]; then
            echo "::error::Failed to send playbook execution request"
            exit 1
          fi

          # Display the response
          echo "Response:"
          echo "$response"

          # Extract the job ID using grep and awk
          job_id=$(echo "$response" | grep -o '"job_id":"[^"]*"' | awk -F'"' '{print $4}')
          if [ -z "$job_id" ]; then
            echo "::error::Failed to get job ID from response"
            exit 1
          fi

          echo "Job ID: $job_id"
          echo "job_id=$job_id" >> $GITHUB_OUTPUT

      - name: Wait for Job Completion
        run: |
          job_id=${{ steps.execute-playbook.outputs.job_id }}
          echo "Waiting for job $job_id to complete..."

          # Wait for the job to complete
          for i in $(seq 1 $MAX_RETRIES); do
            status=$(curl -s "http://localhost:9090/api/jobs/$job_id" | grep -o '"status":"[^"]*"' | awk -F'"' '{print $4}')
            
            if [ "$status" = "completed" ]; then
              echo "✓ Job completed successfully"
              exit 0
            elif [ "$status" = "failed" ]; then
              echo "::error::Job failed"
              exit 1
            fi
            
            echo "Job status: $status (attempt $i of $MAX_RETRIES)"
            sleep $RETRY_INTERVAL
          done

          echo "::error::Job did not complete in time"
          exit 1 
